% vault, pki
# submit CA information for the backend via a PEM file containing the CA private key and its certificate concatenated
jq -Rs '{ "pem_bundle": . }' < <(cat <pki_private_key> <pki_public_chain>) | curl \
  --header "X-Vault-Token: ${VAULT_TOKEN}" \
  --request POST \
  --data @- \
  ${VAULT_ADDR}/v1/<pki_secrets_handler>/config/ca


# list current pki certificates by serial number
curl \
  --header "X-Vault-Token: ${VAULT_TOKEN}" \
  --request LIST \
  ${VAULT_ADDR}/v1/<pki_secrets_handler>/certs


# read a certificate
curl \
  ${VAULT_ADDR}/v1/<pki_secrets_handler>/cert/<serial>

# unauthenticated, get CA certificate in raw PEM format
curl \
  ${VAULT_ADDR}/v1/<pki_secrets_handler>/ca/pem

# unauthenticated, get CA certificate chain, including CA in PEM format
curl \
  ${VAULT_ADDR}/v1/<pki_secrets_handler>/ca_chain

# unauthenticated, get CRL in pem
curl \
  ${VAULT_ADDR}/v1/<pki_secrets_handler>/crl/pem

# tidy up vault certificate store
vault write pki_int/tidy tidy_cert_store=true tidy_revoked_certs=true


$ serial: echo -e 'serialnumber,ca,crl,ca_chain' | tr ',' '\n'
$ pki_secrets_handler: echo -e 'pki\n'


% vault, auth

# get approle id
curl \
  --header "X-Vault-Token: ${VAULT_TOKEN}" \
  ${VAULT_ADDR}/v1/auth/approle/role/<vault_auth_role>/role-id

# get approle secret id
curl \
  --header "X-Vault-Token: ${VAULT_TOKEN}" \
  --request POST \
  ${VAULT_ADDR}/v1/auth/approle/role/<vault_auth_role>/secret-id

# lookup approle secret id properties
curl \
  --header "X-Vault-Token: ${VAULT_TOKEN}" \
  --request POST \
  --data '{"secret_id": "<vault_approle_secret_id>"}'
  ${VAULT_ADDR}/v1/auth/approle/role/<vault_auth_role>/secret-id/lookup

# destroy approle secret id
curl \
  --header "X-Vault-Token: ${VAULT_TOKEN}" \
  --request POST \
  --data '{"secret_id": "<vault_approle_secret_id>"}'
  ${VAULT_ADDR}/v1/auth/approle/role/<vault_auth_role>/secret-id/destroy

% vault, login
# get a vault token via ldap
vault login -method=ldap username=$USER
