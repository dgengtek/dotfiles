% fly, concourse, pipeline, ci-cd

# Show Concourse help
fly --help



# List all Concourse target aliases
fly targets

# Delete saved configuration for a target
fly --target <target> delete-target

# Sync concourse version with target
fly --target <target> sync

# Login to a selected target
fly --target <target> login



# List all teams within a Concourse target
fly --target <target> teams

# Show the configuration for a given team
fly --target <target> get-team --team-name <team>

# Delete a team from Concourse installation
fly --target <target> destroy-team -n <team>



# list all pipelines
fly --target <target> pipelines

# Make pipeline public
fly --target <target> expose-pipeline --pipeline <pipeline>

# Make pipeline private
fly --target <target> hide-pipeline --pipeline <pipeline>

# Get pipeline / show pipeline
fly --target <target> get-pipeline --pipeline <pipeline>

# Pause a pipeline
fly --target <target> pause-pipeline --pipeline <pipeline>

# Unpause a pipeline
fly --target <target> unpause-pipeline --pipeline <pipeline>

# Rename a pipeline
fly --target <target> rename-pipeline --old-name <pipeline> --new-name <new_pipeline>

# Create pipeline without variables
fly --target <target> set-pipeline --pipeline <new_pipeline> --config <config_yaml>

# Create pipeline with variables
fly --target <target> set-pipeline --pipeline <new_pipeline> --config <config_yaml> --load-vars-from <config_yaml>

# Update pipeline without variables
fly --target <target> set-pipeline --pipeline <pipeline> --config <config_yaml>

# Update pipeline with variables
fly --target <target> set-pipeline --pipeline <new_pipeline> --config <config_yaml> --load-vars-from <config_yaml>

# Validate pipeline without variables
fly validate-pipeline --config <config_yaml>

# Validate pipeline with variables
fly validate-pipeline --config <config_yaml> --load-vars-from <config_yaml>

# Delete a pipeline
fly --target <target> destroy-pipeline --pipeline <pipeline>


# List the jobs of a pipeline
fly --target <target> jobs --pipeline <pipeline>


# Pause a job on a pipeline
fly --target <target> pause-job --job=<pipeline>/<job>


# Unpause a job on a pipeline
fly --target <target> unpause-job --job=<pipeline>/<job>


# Trigger a job on a pipeline
fly --target <target> trigger-job --job=<pipeline>/<job>


# List the latest builds for a job
fly --target <target> builds --job=<pipeline>/<job> --count=<amount>


# Hijack a pipeline job for debugging
fly --target <target> hijack --job=<pipeline>/<job> --build <build>


# Watch the log output from a running job
fly --target <target> watch --job=<pipeline>/<job> --build <build>


# Abort a running build
fly --target <target> abort-build --job=<pipeline>/<job> --build <build>


# List the users who have been active for the past 2 months
fly --target <target> active-users


# List the access of the current user
fly --target <target> userinfo


# List the resources for a pipeline
fly --target <target> resources --pipeline <pipeline>


# Check a resource
fly --target <target> check-resource --resource=<pipeline>/<resource>


# List the versions of a resource
fly --target <target> resource-versions --resource=<pipeline>/<resource>


# Pin a resource version
fly --target <target> pin-resource --resource=<pipeline>/<resource> --version <version>


# Unpin a resource version
fly --target <target> unpin-resource --resource=<pipeline>/<resource>


# prune a stalled, landing, landed, or retiring worker
fly -t <target> prune-worker -w <worker>


# destroy all pipelines
fly -t <target> pipelines --json | jq -r '.[].name' | xargs -I {} fly -t <target> destroy-pipeline --pipeline {}


# run all jobs which have not run once
fly -t <target> jobs -p <pipeline> --json | jq -r '.[] | select(.finished_build == null or or .finished_build.status == "errored") | .name' | sort | xargs -I {} fly -t <target> tj -j <pipeline>/{}

# run a one off task
fly -t <target> execute -c <config_yaml>


$ target:   fly targets --- --column 1
$ team:     fly -t "$target" teams --json | jq -r '.[].name'
$ job:      fly -t "$target" jobs --pipeline "$pipeline" --json | jq -r '.[].name'
$ build:    fly -t "$target" builds --job="${pipeline}/${job}" --json | jq -r '.[].name'
$ resource: fly -t "$target" resources --pipeline "$pipeline" --json | jq -r '.[].name'
$ version:  fly -t "$target" resource-versions --resource="${pipeline}/${resource}" --json | jq -r '.[].id'
$ pipeline: fly -t "$target" pipelines --json | jq -r '.[].name'
$ worker: fly -t "$target" workers --json | jq -r '.[].name'
$ config_yaml: fd --type f '.*\.(yaml|yml)$'
