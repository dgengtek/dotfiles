% fly, concourse, pipeline, ci-cd

# Show Concourse help
fly --help



# List all Concourse target aliases
fly targets

# Delete saved configuration for a target
fly --target <target> delete-target

# Sync concourse version with target
fly --target <target> sync

# Login to a selected target
fly --target <target> login



# List all teams within a Concourse target
fly --target <target> teams

# Show the configuration for a given team
fly --target <target> get-team --team-name <team>

# Delete a team from Concourse installation
fly --target <target> destroy-team -n <team>



# list all pipelines
fly --target <target> pipelines

# Make pipeline public
fly --target <target> expose-pipeline --pipeline <pipeline>

# Make pipeline private
fly --target <target> hide-pipeline --pipeline <pipeline>

# Get pipeline / show pipeline
fly --target <target> get-pipeline --pipeline <pipeline>

# Pause a pipeline
fly --target <target> pause-pipeline --pipeline <pipeline>

# Unpause a pipeline
fly --target <target> unpause-pipeline --pipeline <pipeline>

# Rename a pipeline
fly --target <target> rename-pipeline --old-name <pipeline> --new-name <new_pipeline>

# Create pipeline without variables
fly --target <target> set-pipeline --pipeline <new_pipeline> --config <config_yaml>

# Create pipeline with variables
fly --target <target> set-pipeline --pipeline <new_pipeline> --config <config_yaml> --load-vars-from <config_yaml>

# Update pipeline without variables
fly --target <target> set-pipeline --pipeline <pipeline> --config <config_yaml>

# Update pipeline with variables
fly --target <target> set-pipeline --pipeline <new_pipeline> --config <config_yaml> --load-vars-from <config_yaml>

# Validate pipeline without variables
fly validate-pipeline --config <config_yaml>

# Validate pipeline with variables
fly validate-pipeline --config <config_yaml> --load-vars-from <config_yaml>

# Delete a pipeline
fly --target <target> destroy-pipeline --pipeline <pipeline>


# List the jobs of a pipeline
fly --target <target> jobs --pipeline <pipeline>


# Pause a job on a pipeline
fly --target <target> pause-job --job=<pipeline>/<job>


# Unpause a job on a pipeline
fly --target <target> unpause-job --job=<pipeline>/<job>


# Trigger a job on a pipeline
fly --target <target> trigger-job --job=<pipeline>/<job>


# List the latest builds for a job
fly --target <target> builds --job=<pipeline>/<job> --count=<build_count>


# Hijack a pipeline job for debugging
fly --target <target> hijack --job=<pipeline>/<job> --build <build>


# Hijack a failed build
fly --target <target> hijack --build <build>


# Watch the log output from the last build of a job
fly --target <target> watch --job=<pipeline>/<job>


# Watch the log output from a build of a pipeline job
fly --target <target> watch --build <job_build>


# Abort a running build
fly --target <target> abort-build --job=<pipeline>/<job> --build <build>


# List the users who have been active for the past 2 months
fly --target <target> active-users


# List the access of the current user
fly --target <target> userinfo


# List the resources for a pipeline
fly --target <target> resources --pipeline <pipeline>


# Check a resource
fly --target <target> check-resource --resource=<pipeline>/<resource>


# List the versions of a resource
fly --target <target> resource-versions --resource=<pipeline>/<resource>


# Pin a resource version
fly --target <target> pin-resource --resource=<pipeline>/<resource> --version <version>


# Unpin a resource version
fly --target <target> unpin-resource --resource=<pipeline>/<resource>


# prune a stalled, landing, landed, or retiring worker
fly -t <target> prune-worker -w <worker>


# destroy all pipelines
fly -t <target> pipelines --json | jq -r '.[].name' | xargs -I {} fly -t <target> destroy-pipeline --pipeline {}


# run all jobs which have not run once
fly -t <target> jobs -p <pipeline> --json | jq -r '.[] | select(.finished_build == null or .finished_build.status == "errored" or .finished_build.status == "aborted") | .name' | sort | xargs -I {} -P 0 fly -t <target> tj -j <pipeline>/{}


# run a one off task
fly -t <target> execute -c <config_yaml>


# get all builds in specific state
fly -t "<target>" builds --count=<build_count> --json | jq -r '.[] | select(.status == "<build_state>") | ((.id|tostring) + " " + .pipeline_name + "/" + if has("job_name") then .job_name else .resource_name end + "/" + .name + " " + .status + " " + (if .start_time == null then .start_time else (.start_time | todate) end) + " " + (if .end_time == null then .end_time else (.end_time | todate) end))'


# get all failed jobs
fly -t <target> jobs -p <pipeline> --json | jq -r '.[] | select(.finished_build == null or .finished_build.status == "errored" or .finished_build.status == "aborted") | .name' | sort


# abort all next pending builds of a pipeline
fly -t <target> jobs -p <pipeline> --json | jq -r '.[] | select(.next_build.status == "pending") | ("-j " + .pipeline_name + "/" + .name + " -b " + .next_build.name)' | xargs -L 1 -P 0 fly -t <target> abort-build


# abort all pending builds
fly -t <target> builds --json | jq -r '.[] | select(.status == "pending") | ("-j " + .pipeline_name + "/" + .job_name + " -b " + .name)' | xargs -L 1 -P 0 fly -t <target> abort-build


# check resources of all failed jobs
fly -t <target> resources -p <pipeline> --json | jq -r '.[] | select(.build.status == "failed" or .build == null) | (.pipeline_name + "/" + .name)' | xargs -L 1 -P 0 fly -t <target> check-resource --resource


# get logs of all jobs with finished build state
fly --target <target> jobs --pipeline <pipeline> --json | jq -r '.[] | select(.finished_build.status == "<build_state>") | .finished_build.id' | sort | xargs -L 1 fly -t <target> watch -b


# get logs of all jobs of a pipeline
fly --target <target> jobs --pipeline <pipeline> --json | jq -r '.[] | .finished_build.id' | sort | xargs -L 1 fly -t <target> watch -b


% fly, concourse, pipeline, ci-cd, nushell
# trigger all jobs which did not succeed
nu -c 'fly -t intranet jobs -p <pipeline> --json | from json | filter { |i| ($i.finished_build | is-empty) or ($i.finished_build.status != "succeeded")} | each {|i| fly -t intranet tj -j $"($i.pipeline_name)/($i.name)" }'


$ target:   fly targets --- --column 1
$ team:     fly -t "$target" teams --json | jq -r '.[].name'
$ job:      fly -t "$target" jobs --pipeline "$pipeline" --json | jq -r '.[].name'
$ build:    fly -t "$target" builds --count=<build_count> --job="${pipeline}/${job}" --json | jq -r '.[].name'
$ job_build:    fly -t "$target" builds --count=<build_count> --pipeline "<pipeline>" --json | jq -r '.[] | ((.id|tostring) + " " + .pipeline_name + "/" + if has("job_name") then .job_name else .resource_name end + "/" + .name + " " + .status + " " + (.start_time | todate) + " " + (if .end_time == null then .end_time else (.end_time | todate) end))' --- --column 1 --delimiter ' '
$ resource: fly -t "$target" resources --pipeline "$pipeline" --json | jq -r '.[].name'
$ version:  fly -t "$target" resource-versions --resource="${pipeline}/${resource}" --json | jq -r '.[].id'
$ pipeline: fly -t "$target" pipelines --json | jq -r '.[].name'
$ worker: fly -t "$target" workers --json | jq -r '.[].name'
$ config_yaml: fd --type f '.*\.(yaml|yml)$'
$ build_state: echo -n 'errored,failed,aborted,pending,started' | tr ',' '\n'
$ failed_build: fly -t "$target" builds --count=<build_count> --json | jq -r '.[] | select(.status == "failed") | ((.id|tostring) + " " + .pipeline_name + "/" + if has("job_name") then .job_name else .resource_name end + " " + .status + " " + (if .start_time == null then .start_time else (.start_time | todate) end) + " " + (if .end_time == null then .end_time else (.end_time | todate) end))' --- --column 1
