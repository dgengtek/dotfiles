% device, backup, image

# zero all available space with dd and remove after
sudo dd if=/dev/zero of=<directory_to_zero>/ZEROED bs=1M || rm -fv <directory_to_zero>/ZEROED

# debug systemd networkd name policy assignments
SYSTEMD_LOG_LEVEL=debug sudo -E udevadm test-builtin net_setup_link /sys/class/net/hub0

# get hardware unique address
sudo cat /sys/class/dmi/id/product_uuid

# clone device
sudo dd bs=64k conv=noerror,sync status=progress if=<device>

# remove mbr boot loader
sudo dd if=/dev/zero of=/dev/sda bs=440 count=1 oflag=direct

# wipe mbr
sudo dd if=/dev/zero of=<device> bs=512 count=1 oflag=direct

# overwrite device
sudo dd if=<idevice> of=<device> bs=1M || run.sh -- echo 'done with overwriting <device>'

# resize gpt partition 
sgdisk --move-second-header \
  && sgdisk --delete=<device_partition_nr> <device> \
  && sgdisk --new=<device_partition_nr>:0:0 --typecode=0:8e00 --change-name=0:pv <device> \
  && partprobe <device> \
  && pvresize <device><device_partition_nr>

# add kernel parameter for systemd logging
sed -i -n 'p; s,^\(GRUB_CMDLINE_LINUX_DEFAULT.*\),#\1,p' /etc/default/grub; sed -i 's,^\(GRUB_CMDLINE_LINUX_DEFAULT\)=['\''"]*\([^'\''"]*\)['\''" ]*,\1="\2 systemd.log_level=debug systemd.log_target=kmsg log_buf_len=1M printk.devkmsg=on enforcing=0",' /etc/default/grub

# regenerate grub configuration file
sudo grub-mkconfig -o /boot/grub/grub.cfg

# generate random base64 data
dd if=/dev/urandom count=1 bs=32 2>/dev/null | base64 -w 0

# trim an entire SSD device, all data on device will be lost!
: "data will be lost"; blkdiscard <device>

# create a squashfs from a device
mkdir empty-dir; mksquashfs empty-dir <squashoutput>.squashfs -comp <comp> -p '<device_name>_backup.img f 444 root root dd if=<device> bs=1M'; rmdir empty-dir

# create a loop device for a raw image
sudo losetup --find --partscan <raw_image>

# get device sector sizes
echo <device>; cat /sys/class/block/<device>/queue/physical_block_size; cat /sys/class/block/<device>/queue/logical_block_size

# force filesystem 4096 sector size for shingled magnetic recording drives
sudo mkfs.ext4 -F -b 4096 <filesystem>

# get fsck interval of partition
sudo tune2fs -l <filesystem> | egrep -i "mount count|Check interval|Last|Next"

# dump filesystem information
sudo dumpe2fs <filesystem>

# unmount filesystem
sudo umount <mountpoint>

# generate an updated initramfs image on debian
sudo update-initramfs -u

# disable proxy configuration
unset HTTP_PROXY HTTPS_PROXY http_proxy https_proxy

# mount blockdevice
sudo mount <device>

$ idevice: echo '/dev/zero,/dev/random,/dev/urandom' | tr ',' '\n'
$ mountpoint: mount -l --- --column 3 --delimiter ' '
$ comp: echo 'zstd,gzip,lzma,lzo,lz4,xz' | tr ',' '\n'
$ device: find /dev -mindepth 1 -maxdepth 1 -name 'sd*' -or -name 'vd*' | sed '/[0-9]$/ d'
$ device_partition: find /dev -mindepth 1 -maxdepth 1 -name 'sd*' -or -name 'vd*' | sed '/[^0-9]$/ d'
$ device_name: basename "<device>"
$ device_partition_nr: find /dev/ -mindepth 1 -maxdepth 1 -name '<device_name>?*' | sed 's,^/dev/<device_name>,,'
$ filesystem: mount -l | egrep 'type ext(2|3|4)' --- --column 1 --delimiter ' '


% machine, host

# set new http_proxy vars
http_proxy="<http_proxy>"; export http_proxy; export https_proxy=$http_proxy

# set new no_proxy vars
export no_proxy="<no_proxy>"

# print system information
uname -a


# detect new virtual disk attached from hypervisor
echo "- - -" > /sys/class/scsi_host/host0/scan

# rescan all devices for new disk
for x in /sys/class/scsi_disk/*; do echo '1' > $x/device/rescan; done

# select a random hostname from stdin
find . -type f -exec cat {} + | random_line.py | strip.py | tr -dc '[:alnum:]-' | tr 'A-Z' 'a-z'


% udiskctl
@ admin, squashfs, backup, image
# poweroff and eject device
sudo udisksctl power-off -b <device>


% password
# encrypt a prompted password and copy to system clipboard
systemd-ask-password -n | gpg --armor --batch --encrypt -r <benutzer> | xclip -selection c

# get linux, passwd valid user line
encrypt.py

# export a prompted password
export <NAME>=$(systemd-ask-password -n)

# generate a single random password
pwgen.py -c 1 <length>

# copy a password to clipboard
pwgen.py -a -c 1 32 | xclip -selection c; sleep 15 && echo -n "cleared pw" | xclip -selection c


% certificate

# split a certificate chain into individual files
awk 'split_after == 1 {n++;split_after=0} /-----END CERTIFICATE-----/ {split_after=1} {print > "cert" n ".crt"}' < <file_certificate_chain>


% sudo, passwd
# reset timestamp of sudo to require password prompt
sudo --reset-timestamp

# remove sudo timestamp
sudo --remove-timestamp

# login as user with his shell from passwd
sudo --login --user=<username>

$ username: getent passwd | awk -F ':' '{print $1}'

% benchmark, load, cpu
# load cpu
yes > /dev/null &

% device

# search a device for bad blocks and check
badblocks -wsv


% monitor

# watch temperature sensors
hash /usr/bin/sensors && watch -n 1 /usr/bin/sensors


% pki, gpg

# pull key archive from data storage
keyfiles_suffix=("gpg" "gpg.par2.tar" "gpg.sha256"); version="<keystorage_version>"; for file in "${keyfiles_suffix[@]}"; do mc cp "data/archive/keystorage_${version}.tar.gz.${file}" .; done

# manage pki environment
pki_manage.sh

$ keystorage_version: mc ls --json data/archive | jq -r .key | sd '^keystorage_(\d+\.\d+\.\d+).*' '$1' | sort | uniq


% random

# get random bytes from stream
od -A n -t d -N <bytes> /dev/urandom | awk '{print $1}'

# random number inclusive range (a, b)
python -c "from random import randint;print(randint(<a>,<b>), end='')"

$ randint: python -c "from random import randint;print(randint(<a>,<b>), end='')"


% service

# remotely unseal vault
pass=$(systemd-ask-password -n); sudo salt -I "tags:vault" cmd.run "vault operator unseal $pass" python_shell=True

# unseal vault in k8
pass=$(systemd-ask-password -n); for i in $(seq 0 2); do kubectl -n ops exec vault-$i -- vault operator unseal $pass; done


% virtualization

# is nested virtualization supported?
cat /sys/module/kvm_intel/parameters/nested /sys/module/kvm_amd/parameters/nested


% debug

# get list of deleted files in use
lsof -nP | rg '(deleted)'
