% squashfs, backup, image

# zero all available space with dd and remove after
dd if=/dev/zero of=<directory_to_zero>/ZEROED bs=1M || rm -fv <directory_to_zero>/ZEROED

# clone device
dd bs=64k conv=noerror,sync status=progress if=<device>

# wipe mbr
dd if=/dev/zero of=<device> bs=512 count=1 oflag=direct

# overwrite device
dd if=<idevice> of=<device> bs=1M || run.sh -- echo 'done with overwriting <device>'

# generate random base64 data
dd if=/dev/urandom count=1 bs=32 2>/dev/null | base64 -w 0

# trim an entire SSD device, all data on device will be lost!
: "data will be lost"; blkdiscard <device>

# create a squashfs from a device
mkdir empty-dir; mksquashfs empty-dir <squashoutput>.squashfs -comp <comp> -p '<device_name>_backup.img f 444 root root dd if=<device> bs=1M'; rmdir empty-dir

$ idevice: echo '/dev/zero,/dev/random,/dev/urandom' | tr ',' '\n'
$ comp: echo 'zstd,gzip,lzma,lzo,lz4,xz' | tr ',' '\n'
$ device: find /dev -mindepth 1 -maxdepth 1 -name 'sd*'
$ device_name: basename "<device>"


% machine, host

# print system information
uname -a


% udiskctl
@ admin, squashfs, backup, image
# poweroff and eject device
sudo udisksctl power-off -b <device>


% password
# encrypt a prompted password and copy to system clipboard
systemd-ask-password | tr -d '\n' | gpg --armor --batch --encrypt -r <benutzer> | xclip -selection c


# export a prompted password
export <NAME>=$(systemd-ask-password)


% certificate

# split a certificate chain into individual files
awk 'split_after == 1 {n++;split_after=0} /-----END CERTIFICATE-----/ {split_after=1} {print > "cert" n ".crt"}' < <file_certificate_chain>


% sudo, passwd
# reset timestamp of sudo to require password prompt
sudo --reset-timestamp

# remove sudo timestamp
sudo --remove-timestamp

# login as user with his shell from passwd
sudo --login --user=<username>

$ username: getent passwd | awk -F ':' '{print $1}'

% benchmark, load, cpu
# load cpu
yes > /dev/null &

% device

# search a device for bad blocks and check
badblocks -wsv


% monitor

# watch temperature sensors
hash /usr/bin/sensors && watch -n 1 /usr/bin/sensors


% pki, gpg

# pull key archive from data storage
keyfiles_suffix=("gpg" "gpg.par2.tar" "gpg.sha256"); version="<keystorage_version>"; for file in "${keyfiles_suffix[@]}"; do mc cp "data/archive/keystorage_${version}.tar.gz.${file}" .; done

$ keystorage_version: mc ls --json data/archive | jq -r .key | sd '^keystorage_(\d+\.\d+\.\d+).*' '$1' | sort | uniq


% random

# get random bytes from stream
od -A n -t d -N <bytes> /dev/urandom | awk '{print $1}'

# random number inclusive range (a, b)
python -c "from random import randint;print(randint(<a>,<b>), end='')"

$ randint: python -c "from random import randint;print(randint(<a>,<b>), end='')"
