% docker

# Remove an image
sudo docker image rm <image_id>

# Remove an image from the local image store
sudo docker rmi <image_id>

# Remove all images from the local image store
sudo docker rmi $(sudo docker images -q) --force

# Remove all containers
sudo docker rm $(sudo docker ps -aq)

# remove volumes
sudo docker system prune --volumes --force

# remove all unused images not just dangling ones
sudo docker system prune --all --force

# Stop all containers
sudo docker stop $(sudo docker ps -aq)

# List all images that are locally stored with the Docker engine
sudo docker images

# Build an image from the Dockerfile in the current directory and tag the image
sudo docker build -t <image>:<version> .

# Pull an image from a registry
sudo docker pull <image>:<version>

# Stop a running container through SIGTERM
sudo docker stop <container_id>

# Stop a running container through SIGKILL
sudo docker kill <container_id>

# List the networks
sudo docker network ls

# List the running containers
sudo docker ps

# Delete all running and stopped containers
sudo docker rm -f "$(sudo docker ps -aq)"

# Create a new bash process inside the container and connect it to the terminal
sudo docker exec -it <container_id> bash

# Print the last lines of a container's logs
sudo docker logs --tail 100 <container_id> | less

# Print the last lines of a container's logs and following its logs
sudo docker logs --tail 100 <container_id> -f

# list all containers in json
sudo docker container ls --all --format='{{json .}}'

# Create new network
sudo docker network create <network_name>

$ image_id: sudo docker images --- --headers 1 --column 3 --delimiter '\s\s+'
$ container_id: sudo docker ps --- --headers 1 --column 1 --delimiter '\s\s+'

% swarm

# rebalance containers on available nodes
sudo docker service update --force <service>


% docker-compose

# Builds, (re)creates, starts, and attaches to containers for all services
sudo docker-compose up

# Builds, (re)creates, starts, and dettaches to containers for all services
sudo docker-compose up -d

# Builds, (re)creates, starts, and attaches to containers for a service
sudo docker-compose up -d <service_name>

# Builds, (re)creates, starts, and dettaches to containers for a service
sudo docker-compose up -d <service_name>

# Print the last lines of a serviceâ€™s logs
sudo docker-compose logs --tail 100 <service_name> | less

# Print the last lines of a service's logs and following its logs
sudo docker-compose logs -f --tail 100 <service_name>

# Stops containers and removes containers, networks created by up
sudo docker-compose down


% docker, boot

# Prevent all containers from autostarting on boot
sudo docker update --restart=no $(sudo docker ps -a -q)
