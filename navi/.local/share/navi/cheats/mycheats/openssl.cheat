% openssl, certificate, encryption

## General OpenSSL Commands
# Create a new signing request and key
openssl req -new -newkey rsa:<RSA_LENGTH> -nodes -out <OUTPUT_CSR> -keyout <OUTPUT_KEY>

# Create a new self-signed certificate
openssl req -x509 -sha256 -nodes -days <VALIDITY> -newkey rsa:<RSA_LENGTH> -out <OUTPUT_CRT> -keyout <OUTPUT_KEY>

# Create a signing request from existing key
openssl req -out <OUTPUT_CSR> -key <INPUT_KEY> -new

# Create a signing request from existing certificate and key
openssl x509 -x509toreq -out <OUTPUT_CSR> -in <INPUT_CRT> -signkey <INPUT_KEY>

# Remove a passphrase from a private key
openssl rsa -in <INPUT_KEY> -out <OUTPUT_PLAINTEXT_KEY>

# display and filter the fingerprint, hash of the certificate
openssl x509 -in <certificate> -sha256 -fingerprint -noout | awk -F'=' '{print $2}'


## Converting between the different encoding
# Convert a DER encoded file to a PEM encoded file
openssl x509 -inform der -in <INPUT_CRT> -out <OUTPUT_PEM>

# Convert a PEM encoded file to a DER encoded file
openssl x509 -outform der -in <INPUT_PEM> -out <OUTPUT_CRT>

# Convert a PKCS12 encoded file containing a private key and certificates to PEM
openssl pkcs12 -in <INPUT_PKCS12> -out <OUTPUT_PEM> -nodes

# Extract the private key from a PKCS12 encoded file
openssl pkcs12 -in <INPUT_PKCS12> -out <OUTPUT_PEM> -nodes -nocerts

# Extract the certificate from a PKCS12 encoded file
openssl pkcs12 -in <INPUT_PKCS12> -out <OUTPUT_PEM> -nodes -nokeys

# Convert a PEM certificate file and a private key to PKCS12 encoded file
openssl pkcs12 -export -out <OUTPUT_PKCS12> -inkey <INPUT_KEY> -in <INPUT_CRT> -certfile <INPUT_CRT>



## Validating certificates and keys using OpenSSL
# Validate a certificate signing request
openssl req -text -noout -verify -in <OUTPUT_CSR>

# verify certificates
openssl verify -x509_strict

# verify certificates with certificate revokation list
openssl verify -crl_download -crl_check_all

# decrypt private key from input to stdout
openssl rsa

# encrypt private key
openssl rsa -aes256

# Validate a private key
openssl rsa -in <INPUT_KEY> -check

# Validate a certificate
openssl x509 -in <INPUT_CRT> -text -noout

# Validate a PKCS12 file (.pfx or .p12)
openssl pkcs12 -info -in <INPUT_PKCS12>

# print all relevant fields, extensions, names of the certificate
openssl x509 -in <INPUT_CRT> -noout -ext 'basicConstraints,keyUsage,extendedKeyUsage,subjectAltName,nameConstraints,subjectKeyIdentifier,crlDistributionPoints' -subject -subject_hash -issuer -issuer_hash


# get the notbefore, notafter -dates of the certificate
openssl x509 -noout -startdate -enddate

## Debugging using OpenSSL
# Compare the MD5 hash of a certificate
openssl x509 -noout -modulus -in <INPUT_CRT> | openssl md5

# Compare the MD5 hash of a private key
openssl rsa -noout -modulus -in <INPUT_KEY> | openssl md5

# Compare the MD5 hash of a certificate signing request
openssl req -noout -modulus -in <INPUT_CSR> | openssl md5

# Display the server certificate chain
openssl s_client -showcerts -connect <URL>:<PORT>

# get spki hash
openssl x509 -pubkey <certificate> | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | awk '{print $2}'

# Download service certificate
echo | \
  openssl s_client -servername <DOMAIN> -connect <URL>:<PORT> 2>/dev/null | \
  openssl x509 -text | less

# generate a private key with the given public key algorithm
openssl genpkey -algorithm <private_key_algorithm>

# generate rsa key pair
openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:<rsa_bits>

# get the rsa public key
openssl rsa -in <private_key> -pubout

# generate ec parameters
openssl genpkey \
  -genparam -algorithm EC \
  -pkeyopt ec_paramgen_curve:secp384r1 \
  -pkeyopt ec_param_enc:named_curve

# generate ec key
openssl genpkey \
  -algorithm EC \
  -pkeyopt ec_paramgen_curve:P-384 \
  -pkeyopt ec_param_enc:named_curve

# Sensible/common default alternatives
$ private_key_algorithm: echo -n "RSA,RSA-PSS,EC,X25519,X448,ED25519,ED448" | tr ',' '\n'
$ VALIDITY: printf "DAYS\tCOMMENT\n1\ta day\n30\ta month\n365\ta year\n730\ttwo years" --- --column 1 --headers 1
$ RSA_LENGTH: printf "KEY LENGTH\tCOMMENT\n2048\t\tDefault\n4096\t\tBetter\n8192\t\tSlow?" --- --column 1 --headers 1


% openssl, encryption

# Encrypt file
openssl enc -aes-256-cbc -e -in <sample-filename-txt> -out <sample-encrypted-txt>

# Decrypt file
openssl enc -aes-256-cbc -d -in <sample-encrypted> -out <sample-filename>
