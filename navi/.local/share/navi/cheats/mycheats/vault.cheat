% vault, pki
# submit CA information for the backend via a PEM file containing the CA private key and its certificate concatenated
jq -Rs '{ "pem_bundle": . }' < <(cat <pki_private_key> <pki_public_chain>) | curl \
  --header "X-Vault-Token: ${VAULT_TOKEN}" \
  --request POST \
  --data @- \
  ${VAULT_ADDR}/v1/<pki_secrets_handler>/config/ca


# generate a new certificate
jq -ns '{ "common_name": "<common_name>" }' \
  | curl \
    --header "X-Vault-Token: ${VAULT_TOKEN}" \
    --request POST \
    --data @- \
    ${VAULT_ADDR}/v1/<pki_secrets_handler>/issue/<role>


# query role definition
curl \
  --header "X-Vault-Token: ${VAULT_TOKEN}" \
  ${VAULT_ADDR}/v1/<pki_secrets_handler>/roles/<role>


# list available role definitions
curl \
  --header "X-Vault-Token: ${VAULT_TOKEN}" \
  --request LIST \
  ${VAULT_ADDR}/v1/<pki_secrets_handler>/roles


# set vault token in current shell environment
export VAULT_TOKEN=$(systemd-ask-password)


# list current pki certificates by serial number
curl \
  --header "X-Vault-Token: ${VAULT_TOKEN}" \
  --request LIST \
  ${VAULT_ADDR}/v1/<pki_secrets_handler>/certs


# read a certificate
curl \
  ${VAULT_ADDR}/v1/<pki_secrets_handler>/cert/<serial>

# unauthenticated, get CA certificate in raw PEM format
curl \
  ${VAULT_ADDR}/v1/<pki_secrets_handler>/ca/pem

# unauthenticated, get CA certificate chain, including CA in PEM format
curl \
  ${VAULT_ADDR}/v1/<pki_secrets_handler>/ca_chain

# unauthenticated, get CRL in pem
curl \
  ${VAULT_ADDR}/v1/<pki_secrets_handler>/crl/pem

# tidy up vault certificate store
vault write pki_int/tidy tidy_cert_store=true tidy_revoked_certs=true


$ serial: echo -e 'serialnumber,ca,crl,ca_chain' | tr ',' '\n'
$ pki_secrets_handler: echo -e 'pki\n'


% vault, auth

# get approle id of an existing approle
curl \
  --header "X-Vault-Token: ${VAULT_TOKEN}" \
  ${VAULT_ADDR}/v1/auth/approle/role/<approle>/role-id


# list existing approles
curl \
  --header "X-Vault-Token: ${VAULT_TOKEN}" \
  --request LIST \
  ${VAULT_ADDR}/v1/auth/approle/role


# get, read definition, properties of an approle
curl \
  --header "X-Vault-Token: ${VAULT_TOKEN}" \
  ${VAULT_ADDR}/v1/auth/approle/role/<approle>


# get, read policies of approle
curl \
  --header "X-Vault-Token: ${VAULT_TOKEN}" \
  ${VAULT_ADDR}/v1//auth/approle/role/<approle>/policies


# updates the roleid of an existing approle to a custom value
jq -ns '{ "role_id": "<custom_role_id>" }' \
  | curl \
    --header "X-Vault-Token: ${VAULT_TOKEN}" \
    --request POST \
    --data @- \
    ${VAULT_ADDR}/v1/auth/approle/role/<approle>/role-id


# generates and issues a new secretid on an existing approle, secret_id_accessor for info, deleting
jq -ns '{ "metadata": "<custom_metadata>" }' \
  | curl \
    --header "X-Vault-Token: ${VAULT_TOKEN}" \
    --request POST \
    ${VAULT_ADDR}/v1/auth/approle/role/<approle>/secret-id


# lists the accessors of all the secretids issued against the approle
curl \
  --header "X-Vault-Token: ${VAULT_TOKEN}" \
  --request LIST \
  ${VAULT_ADDR}/v1/auth/approle/role/<approle>/secret-id


# lookup approle secret id properties
jq -ns --arg secret_id "$(systemd-ask-password)" '{ "secret_id": "$secret_id" }' \
  | curl \
    --header "X-Vault-Token: ${VAULT_TOKEN}" \
    --request POST \
    --data @- \
    ${VAULT_ADDR}/v1/auth/approle/role/<approle>/secret-id/lookup


# destroy approle secret id
jq -ns --arg secret_id "$(systemd-ask-password)" '{ "secret_id": "$secret_id" }' \
  | curl \
    --header "X-Vault-Token: ${VAULT_TOKEN}" \
    --request POST \
    --data @- \
    ${VAULT_ADDR}/v1/auth/approle/role/<approle>/secret-id/destroy


% vault, login

# get a vault token via ldap
vault login -method=ldap username=$USER

# get a token via approle auth method
jq -ns --arg secret_id "$(systemd-ask-password)" '{ "role_id": "<role_id>", "secret_id": "$secret_id" }' \
  | curl \
    --request POST \
    --data @- \
    ${VAULT_ADDR}/v1/auth/approle/login
