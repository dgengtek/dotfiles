% taskwarrior

# show current context
task context show

# get available contexts
task context list

# set the currently active context
task context <context>

# clear active context
task context none

# create new context for project
task_project=$(task _project | fzf --no-multi); task context define "$task_project" "project:'$task_project'"

# add a new task interactively :: taska
intentm add

# add a new task declared as a root project interactively :: taskap
intentm add --project

# add a new task to the inbox, skipping all udas to decide for later
intentm add --inbox

# add a task to the inbox of a project
task add state:pending project:"$(task _project | fzf)"

# select and save a project name
task_project=$(task _project | fzf --no-multi)

# select a project and prompt for new inbox tasks
task_project=$(task _project | fzf); with "task add state:pending project:'$task_project' "

# add a task to the inbox of a project with dependencies
task add state:pending project:<project> deps:<tasks_joined> <tags> -- <description>

# convert a task to a project task
task <task> modify +project state:proj why:<why>

# search a task interactively
intentm search

# review a task interactively
intentm review

# review all tasks which require a review interactively
intentm review --all

# select a task which will be child of all successive selected tasks
intentm dep <task>

# select a task which will be parent of all successive selected tasks
intentm dep -r <task>

# get minimal report of all tasks
task l

# get report of active projects and next actions
task

# get report of tasks i should not do during my leisure
task -freizeit -hobby -lebensziel

# show milestones of project
task project:"<project>" +milestone decide

# get detailed report of every task in the database
task all

# get a report of all tasks with state maybe
task maybe

# get a report of all blocking tasks
task blocking

# get a report of overdue tasks
task overdue

# get a report of waiting tasks
task waiting

# display the current tasks for a project
task project:"<project>" decide

# edit all tasks which have no tags
task tags.none: edit

# list all task for filtering
task long

# show all tasks which have no project set 
task projects.none: long

# view all next projects
task limit:none | less

# lookup task information
task <task> information

# complete a task
task <task> done

# tickle, delay a task to think on it
task <task> <command_modify> wait:+1d

# lookup multiple single line tasks
intent print info '<tasks_joined>'

# add new task to intray
task add state:pending project:"<project>" <tags> -- <description>

# show the projects tracking root task
task state:'proj' project:"<project>"

# duplicate a task and edit
new_task=$(task dup <task> | sed -n '/Created task/s/Created task \([[:digit:]]*\)\./\1/p') && test -n "$new_task" && task edit "$new_task"

# get a task id
<task>

# select multiple tasks
intent print lines | fzf --multi

# watch project overview
watch "task project:'<project>' decide"

# select multiple tasks directly
task status:pending "$@" export | jq -r '.[] | [.id, .description, "[[[" + ( [try .annotations[].description] | join(", ")) + "]]]", (try .tags | join(","))] | join(" ")' | fzf --preview="task {1}"

$ command_modify: echo -e 'add\nmodify\n'
$ task: intent print lines --- --delimiter '\s+' --preview 'task {1} information' --column 1
$ tasks: intent print lines --- --delimiter '\s+' --preview 'task {1} information' --column 1 --multi
$ tasks_joined: echo -n '<tasks>' | tr '\n' ','
$ context: rg ^context "$HOME/.taskrc" | awk -F '.' '{print $2}' | sort | uniq
$ id: task top
$ project: task _project
$ tag: task _tags
