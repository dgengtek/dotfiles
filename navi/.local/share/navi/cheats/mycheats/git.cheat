% git

# interactively add changed files from git toplevel and autocommit
pushd $(git rev-parse --show-toplevel)
git add -i .
git commit -m "autocommit - $(date +%y%m%d%H%M%S)"
git push
popd

# export and compress repository
git archive --format=tar HEAD | xz -9 --stdout

# commit count by authors
git shortlog -s -n

# output patch by commit
git format-patch --stdout -1 <commit>

# check if a patch can be applied
git apply --stat <patch>

# apply a patch to current directory
git apply <patch>

# apply a series of patches from email
git am <patch>

# show current commit tree of all branches
git log --graph --decorate --oneline --simplify-by-decoration --all

# get amount of commits
git rev-list HEAD --count

# Set global git user name
git config --global user.name <name>

# Set global git user email
git config --global user.email <email>

# Initializes a git repository
git init

# Clone a git repository
git clone -b <branch_name> <repository> <clone_directory>

# Shallow clone with depth 1 with all branches and submodules
git clone --depth=1 --no-single-branch --recurse-submodules <repository> <clone_directory>

# Rebase upstream master into local/origin master (use if people don't clone your repository)
git fetch <remote>
git checkout master
git rebase <remote>/master
git fetch --unshallow origin
git push -f origin master

# rebase on top of remote master
git rebase origin/master

# since today
--since=midnight

# check if tag contains a commit
git tag --contains <input_commit>

# check if branch contains a commit
git branch --contains <input_commit>

# Apply the changes introduced by some existing commits
git cherry-pick

# Merge upstream master into local/origin master (use if people clone your repository)
git fetch <remote>
git checkout master
git merge <remote>/master
git fetch --unshallow origin
git push -f origin master

# View all available remote for a git repository
git remote --verbose

# get git logs from a specific date range
git log --pretty=format:"%ad - %H %an: %s" --after="<after>" --until="<until>"

# follow and display changes across renames for a file
git log --patch --follow <file>

# remove old reflog references from the history
git reflog expire --expire=90.days.ago --expire-unreachable=now --all

# Adds a remote for a git repository
git remote add <remote> <remote_url>

# Renames a remote for a git repository
git remote rename <remote> <new_remote_name>

# Remove a remote for a git repository
git remote remove <remote>

# Checkout to branch
git checkout <branch>

# stage files interactively
git add --interactive

# Stage all files in project
git add --all

# Create commit for staged files
git commit -m "<commit_description>"

# Create backdated commit for staged files
git commit --date="<number_of_days_ago> days ago" -m "<commit_description>"

# Pushes changes to a remote repository overwriting another branch
git push <remote> <branch>:<branch_to_overwrite>

# Overwrites remote branch with local branch changes
git push <remote> <branch_name> -f

# delete remote branch
git push -d <remote> <branch_name>

# delete local, tracking and remote branch
git push -d <remote> <branch_name>
git branch -d <branch_name>
git branch -dr <remote>

# Pulls changes to a remote repo to the local repo
git pull --ff-only

# Merges changes on one branch into current branch
git merge <branch_name>

# Abort the current conflict resolution process, and try to reconstruct the pre-merge state.
git merge --abort

# Displays log of commits for a repo
git log

# Displays formatted log of commits for a repo
git log --all --decorate --oneline --graph

# list all deleted files from repository
git log --all --pretty=format: --name-only --diff-filter=D | sort -u

# Clear everything
git clean -dxf

# Sign all commits in a branch based on master
git rebase master -S -f

# Checkout a branch from a fork
git fetch origin pull/<pr_number>/head:pr/<pr_number> \
   && git checkout pr/<pr_number>

# Add a new module
git submodule add <repository> <path>

# Update module
git submodule update --init

# Update module without init
git submodule update

# Pull all submodules
git submodule foreach git pull origin master

# Update all submodules
git submodule update --init --recursive

# Skip git hooks
git commit --no-verify

# Create new branch from current HEAD
git checkout -b <new_branch_name>

# Remove commits from local repository (destroy changes)
git reset --hard HEAD~<number_of_commits>

# Remove commits from local repository (keep changes)
git reset --soft HEAD~<number_of_commits>

# squash the last commits
git reset --soft HEAD~<number_of_commits> && git commit

# squash
git merge --squash

# get current git head name, branch
git rev-parse --abbrev-ref HEAD

# get current git commit hash
git rev-parse HEAD

# stash, checkout and pull from remote master to master
git_auto_pull.sh -r <remote> -- --ff

# cat deleted file from git history
git show $(git rev-list --max-count=1 --all -- <deleted_file>)^:<deleted_file>

# cat, get file from a different branch
git show <branch>:<file>

# cat, get file from a different commit
git show <commit>:<file>

# is file tracked?
git ls-files --error-unmatch <file>

# show untracked files
git ls-files --others --exclude-standard |
  while read -r file; do
    git diff --color -- /dev/null "$file"
  done

# force objects in repo to be dereferenced and garbage collected
git for-each-ref --format='delete %(refname)' refs/original \
  | git update-ref --stdin
git reflog expire --expire=now --all
git gc --prune=now

# show full hash history
git reflog --no-abbrev

# set remote origin from current environment to the repository basename
git_init_remote_origin.sh -b

# output current git repository state in json
git_state.py

# remove file completely from repository and history
git_rm.sh <file>

# remove directory completely from repository and history
git_rm.sh -r <folder>

# list all branches
git branch --all

# get tracking remote of branch
git config --get branch.<branch>.remote

# get ref of remote tracking branch
git config --get branch.<branch>.merge

# show what changed between branch and remote branch
git diff-tree -r <branch> <remote_branch>

# push all tags
git push <remote> --all && git push <remote> --tags

# push and set upstream tracking name for branch
git push --set-upstream <upstream_name> <branch>

# set upstream tracking information of branch
git branch --set-upstream-to=<remote>/<branch> <branch>

# what changed in the repository since 2 weeks ago
git log --no-merges --raw --since='2 weeks ago'

# reset and cleanup repository
git reset --hard && git clean -dfx

# Resets the index and working tree. Any changes to tracked files in the working tree since <commit> are discarded
git reset --hard <commit>

# show signatures from log
git log --show-signature

# display, output information such as creations, renames and mode changes
git log --compact-summary

# display logs with stats
git log --stat --max-count=<log_max_count>

# use git web
git instaweb

# unstaged items exist
git diff --exit-code --quiet

# staged items exist
git diff --cached --exit-code --quiet

# untracked items exist
git ls-files --other --exclude-standard --directory | egrep -v '/$'

# list ignored git files
git check-ignore *

# how many commits behind is the branch compared to the selected branch2?
git rev-list --count <branch>..<branch2>

# checkout a specific commit
git checkout <commit>

# get, search for a specific commit
<commit>

# select multiple commits
<commits>

# get pretty oneline custom log entries
git log --pretty=format:'%Cred%H%Creset -%C(yellow)%d%Creset %s %Cgreen(%cI) %C(bold blue)<%an, %ae>%Creset'

# update with new repository origin
git remote rm <remote> &&
git remote add <new_remote> <new_repository_url> &&
git pull --all &&
git push --mirror -u;

# git rebase commits onto branch
git checkout -b staging_branch &&
git rebase --interactive HEAD~<number_of_commits> --onto <branch> &&
git checkout <branch> &&
echo git merge staging_branch;


$ commit: git log --pretty=format:'%H - %d %s (%cI) <%an, %ae>' --- --column 0 --delimiter ' ' --preview 'git show --pretty=fuller --color=always {1}'
$ commits: git log --pretty=format:'%H - %d %s (%cI) <%an, %ae>' --- --multi --column 0 --delimiter ' ' --preview 'git show --pretty=fuller --color=always {1}'
$ folder: fd --type d
$ file: fd --type f
$ deleted_file: git log --all --pretty=format: --name-only --diff-filter=D
$ active_branch: git rev-parse --abbrev-ref HEAD
$ branch: git branch --format "%(refname:lstrip=2)"
$ branch_any: git for-each-ref --format "%(refname)"
$ branch2: git branch --format "%(refname:lstrip=2)"
$ tag: git tag --list
$ remote: git remote
$ remote_branch: git branch --remotes --format "%(refname:lstrip=2)"
$ toplevel_directory: git rev-parse --show-toplevel
$ untracked_files: git ls-files --other --exclude-standard --directory
$ unstaged_files: git ls-files --modified --deleted
$ patch: fd --type f '.*\.patch'
