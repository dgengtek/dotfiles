% saltstack

@ template, reuse

# sync fileserver
sudo salt-run fileserver.update

# get list of hosts from netbox
sudo salt-run --out=json netbox.list_hosts | jq -r '.[]'

# convert flat inventory to saltstack roster
jq 'to_entries | .[] | {(.value|tostring): {"host": .value}}' inventory | jq -r -s '. | add | tojson' | jsontoyaml.py

# get all failed tasks from jid result
q '.[].return.data[][] | select(.result == false)'

# export and compress salt repository for simple install
git archive --format=tar HEAD salt setup.py setup.cfg requirements README.rst scripts doc/man | xz -9 --stdout

# sync execution modules to salt-master
sudo salt-run saltutil.sync_modules

# sync all on salt-master
sudo salt -I "tags:salt-master" saltutil.sync_all

# sync all minions
sudo salt --async "*" saltutil.sync_all

# refresh the in-memory pillar and external pillar data on the minions
sudo salt --async "*" saltutil.refresh_pillar

# sync grains on all minions
sudo salt --async "*" saltutil.sync_grains

# get a list of all hosts
jq -r 'keys | .[]' <tags_of_hosts>

# get a list of all tags
jq -r 'keys | .[]' <hosts_to_tags>

# get the tags specific to a host
jq '."<host>"' <tags_of_hosts>

# get the hosts specific to a tag
jq '."<tag>"' <hosts_to_tags>

# get values from json output
sudo salt --out=json "<host>" cmd.run <cmd_with_json_output> | jq 'to_entries[].value | fromjson'

# sync specific tag
sudo salt -I "<tags>" saltutil.sync_all

# highstate test specific tag
sudo salt -I "<tags>" state.highstate test=True

# run a function on a tag
sudo salt -I "<tags>" <function>

# sync specific minion
sudo salt "<host>" saltutil.sync_all

# run a function on a host
sudo salt "<host>" <function>

# get, return top data the the minion will use for highstate
sudo salt "<host>" state.show_top

# get, return the list of states that will be applied on highstate
sudo salt "<host>" state.show_states

# show running state functions
sudo salt "<host>" state.running

# execeute states in one or more sls files
sudo salt "<host>" state.sls <sls_files>

# kill running state 
sudo salt "<host>" saltutil.kill_job <jid>

# get the compiled pillar top data for a specific minion
sudo salt-run pillar.show_top "<host>"

# watch salt state events
sudo salt-run state.event | while read -r tag data; do echo $tag; echo $data | jq --color-output .; done

# get job id results after receiving the job return from the event bus
jid=<jid>; sudo salt-run state.event | while read -r tag data; do [[ "$tag" =~ "$jid/ret" ]] && break; done; sudo salt-run jobs.lookup_jid "$jid"

# lookup jid results
sudo salt-run jobs.lookup_jid <jid>

# Reboot a minion and and wait until it is back online
sudo salt --async "<host>" system.reboot \
  && salt-run state.event 'salt/minion/<host>/start' count=1 quiet=True

# setup host for first time
sudo salt-run state.orch orch.setup_host pillar='<orch_pillar_upgrade_host>'

# provision salt minion
sudo salt-run state.orch orch.provision_salt_minion pillar=

# run highstate on minions
sudo salt-run state.orch orch.highstate pillar=

# provision network configuration of salt minion
sudo salt-run state.orch orch.provision_network pillar=

# provision minion with highstate
sudo salt-run state.orch orch.provision pillar=

# reboot salt minion and wait for it to come back online
sudo salt-run state.orch orch.reboot_host pillar='<orch_pillar_part_common>'

# reboot a single host
sudo salt-run state.orch orch.reboot_host pillar='{"orch": {"targets": ["<host>"], "target_type": "list"}}'

# download and import a lxc image
alias='<alias>';url='<url>'; filename=$(basename "$url"); sudo salt --async "<host>" cmd.run "wget -c '$url' && lxc image import --alias '$alias' '$filename'" cwd=/tmp

# upgrade minions
sudo salt-run state.orch orch.upgrade pillar=

# restart salt minion service and wait for it to come back online
sudo salt-run state.orch orch.restart_service_salt_minion pillar=

# set pillar from input file
pillar="$(cat ./<compgen_file_yaml> | yamltojson.py)"

# generic pillar for targeting hosts by name
<orch_pillar_common_host>

# generic pillar for targeting hosts by tag
<orch_pillar_common_tags>

# generic pillar for upgrading hosts by name
<orch_pillar_upgrade_host>

# generic pillar for upgrading hosts by tag
<orch_pillar_upgrade_tags>


$ file_tags_of_hosts: echo "$HOME/tmp_tags_of_hosts.json"
$ tags_of_hosts: test -f <file_tags_of_hosts> && [[ "$(find <file_tags_of_hosts> -mtime -1)" ]] || sudo salt-run --out=json netbox.list_tags_of_hosts > <file_tags_of_hosts>_tmp; test -s <file_tags_of_hosts>_tmp && mv <file_tags_of_hosts>{_tmp,}; echo <file_tags_of_hosts>
$ host: jq -r 'keys | .[]' <tags_of_hosts>

$ file_hosts_to_tags: echo "$HOME/tmp_hosts_to_tags.json"
$ hosts_to_tags: test -f <file_hosts_to_tags> && [[ "$(find <file_hosts_to_tags> -mtime -1)" ]] || sudo salt-run --out=json netbox.map_hosts_to_tags > <file_hosts_to_tags>_tmp; test -s <file_hosts_to_tags>_tmp && mv <file_hosts_to_tags>{_tmp,}; echo <file_hosts_to_tags>
$ tags: jq -r 'keys | "tags:" + .[]' <hosts_to_tags>
$ tag: jq -r 'keys | .[]' <hosts_to_tags>

$ target_type: echo 'glob,list,grain,pillar,compound' | tr ',' '\n'
$ orch_pillar_part_common: jq -c -n '{orch: {{targets: "", target_type: "<target_type>", skyp_sync: false}}'
$ orch_pillar_part_reboot: jq -c -n '{reboot_minion: false}'
$ orch_pillar_part_batch: jq -c -n '{batch: 5}'
$ orch_pillar_part_upgrade: jq -c -n '{maintenance: {update: {kernel: true}}}'
$ orch_pillar_part_host: jq -c -n --arg hosts "<host>" '{targets: $hosts | split("\n") }' --- --multi
$ orch_pillar_part_tags: jq -c -n --arg tags "<tags>" '{targets: $tags | split("\n") }' --- --multi
$ orch_pillar_common_host: echo '<orch_pillar_part_common> <orch_pillar_part_reboot> <orch_pillar_part_host>' | jq -c -s add | jsontoyaml.py | vipe | yamltojson.py
$ orch_pillar_common_tags: echo '<orch_pillar_part_common> <orch_pillar_part_reboot> <orch_pillar_part_tags>' | jq -c -s add | jsontoyaml.py | vipe | yamltojson.py
$ orch_pillar_upgrade_host: echo '<orch_pillar_part_upgrade> <orch_pillar_part_common> <orch_pillar_part_reboot> <orch_pillar_part_host>' | jq -c -s add | jsontoyaml.py | vipe | yamltojson.py
$ orch_pillar_upgrade_tags: echo '<orch_pillar_part_upgrade> <orch_pillar_part_common> <orch_pillar_part_reboot> <orch_pillar_part_tags>' | jq -c -s add | jsontoyaml.py | vipe | yamltojson.py
