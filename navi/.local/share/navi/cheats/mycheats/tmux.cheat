% tmux
@ template

# load tmuxp defined session
if ! { [[ "$TERM" =~ "screen" ]] && [[ -n "$TMUX" ]]; }; then
  tmuxp load <tmuxp_session>
else
  run.sh -q -n -- alacritty -e bash --init-file <(cat ~/.bashrc;echo "tmuxp load <tmuxp_session>";echo "exit 0")
fi

# copy, select in tmux
tmux copy-mode

# run commands new windows of the tmux run session
tmux_run_session.sh <commandstring>

# run command in a new window in the current session while remaining on exit
tmux_run_window_wait.sh <commandstring>

# attach to an existing session
tmux attach-session -t <session>

# rename session
tmux rename-session -t <session> <new_session_name>

# rename active window to current working path
tmux rename-window $(basename "$PWD")

# lock client
tmux lock-client -t <client>

# lock session
tmux lock-session -t <session>

# display the environment 
tmux show-environment -t <session>

# display the global environment 
tmux show-environment -g -t <session>

# show the current session name
tmux display-message -p '#S'

# Put a pane into buffer mode, where a buffer may be chosen interactively from a list.
tmux choose-buffer

# delete buffer
tmux delete-buffer -b <buffer>

# pipe to tmux buffer, clip output
tmux loadb -

# print clipped, saved output
tmux saveb -

# Save the contents of the specified paste buffer to path
tmux save-buffer -b <buffer> <path>

# Display the contents of the specified buffer
tmux show-buffer -b <buffer>

# Lock each client individually
tmux lock-server

# recreate socket if session lost
killall -10 tmux

# display a large clock
tmux clock-mode

# prevents the client from exiting until woken using wait-for -S with the same channel
tmux wait-for <channel>

# wake up channel
tmux wait-for -S <channel>

# lock channel
tmux wait-for -L <channel>

# unlock channel
tmux wait-for -U <channel>

# create a detached session
tmux new-session -d -s <new_session_name>

# create a new tmux window from the relative directory
tmux new-window -c "<compgen_directory_cwd>"

# create a new tmux window from the relative directory and rename
tmux new-window -c "<compgen_directory_cwd>" -n "$(basename <compgen_directory_cwd>)"

# create a new tmux session from directory
tmux new-session -c <directory> -s <new_session_name>

# Destroy the given session, closing any windows linked to it and no other sessions, and detaching all clients attached to it
tmux kill-session -t <session>

# create simple tmux work window layout
tmux new-window -n sh \; new-window -n src \; new-window -n tests

# set a layout for tmux windows
tmux select-layout <layout>

# capture the contents, output of a pane to stdout
tmux capture-pane -p

# put a pane into client mode, interactively select a client from a list
tmux choose-client

# Put a pane into tree mode, where a session, window or pane may be chosen interactively from a list
tmux choose-tree

# destroy the given pane
tmux kill-pane -t <pane>

# destroy the window
tmux kill-window -t <window>

# select window
tmux select-window -t <window>

# join to pane
tmux join-pane -s '<pane>'

# copy whole pane from the beginning of its history
tmux capture-pane -S - '<pane>'

# pipe current output of pane to file
tmux pipe-pane -t '<pane>' -o 'cat >>~/tmux_output.#I-#P'

# break src-pane off from its containing window to make it the only pane in dst-window
tmux break-pane -s '<pane>' -t '<window>'

# switch to session
tmux switch-client -t <session>

$ client: tmux list-clients --- --column 1 --delimiter ':' 
$ session: tmux list-sessions --- --column 1 --delimiter ':' --preview 'tmux capture-pane -t {1} -p'
$ window: tmux list-windows --- --column 1 --delimiter ':' --preview 'tmux capture-pane -t {1} -p'
$ pane: tmux list-panes --- --column 1 --delimiter ':' --preview 'tmux capture-pane -t {1} -p'
$ layout: echo -e 'even-horizontal,even-vertical,main-horizontal,main-vertical,tiled' | tr ',' '\n'
$ buffer: tmux list-buffers
$ tmuxp_session: fd --follow --type f . "$TMUXP_PATH" --- --preview 'bat {}'
