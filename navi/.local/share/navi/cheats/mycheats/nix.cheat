% nix

# update single flake input
nix flake lock --update-input <input>

# print nix system info
nix-shell -p nix-info --run "nix-info -m"

# nixpkgs loaded in nix repl
nix repl '<nixpkgs>'

# run repl with local flake loaded
nix repl --expr "builtins.getFlake \"$PWD\""

# run repl with nixpkgs tarball loaded
nix repl --expr 'import (builtins.fetchTarball https://github.com/NixOS/nixpkgs/tarball/nixos-24.05) {system = "x86_64-linux";}'

# drop in build environment for an expression
nix-shell -E "with import <nixpkgs> {}; callPackage <nix_file> {}"

# get derivation values generated from nix file
nix show-derivation $(nix-instantiate <nix_file>)

# run manual build from a nix shell
export out=$(mktemp -d); set -x; set +e; export NIX_ENFORCE_PURITY=0; genericBuild

# upgrade nix (old)
nix-channel --update && nix-env --install --attr nixpkgs.nix nixpkgs.cacert

# list flake packages of architecture
nix eval .#packages.x86_64-linux --apply builtins.attrNames --json

# list available attributes of flake
nix eval .#packages --apply builtins.attrNames --json

# list all attributes of flake
nix eval . --apply builtins.attrNames --json

# list of all the currently existing generations for the active profile
nix-env --list-generations

# upgrade all packages in environment
nix-env --upgrade

# displays information about either the store paths that are installed in the current generation of the active profile (--installed), or the derivations that are available for installation in the active Nix expression
nix-env --query

# print the output path of the derivation of currently installed packages
nix-env --query --out-path

# print runtime dependencies of the program
nix-store --query --references $(which <program>)

# print reverse dependencies of the program
nix-store --query --referrers $(which <program>)

# print current references to active user profile
nix-store --query --references $HOME/.nix-profile

# fix store, nix paths
nix-store --verify --check-contents --repair

# switch to older generation
nix-env --rollback

# switch to generation
nix-env --switch-generation <generation>

# get nix config
nix config show

# get store path of package
nix eval --raw nixpkgs#<package>

# create hash of the file for nix store
nix-hash --type sha256 --flat --base32 <filename>

# get path to the store for the file
nix-store --print-fixed-path sha256 <filename_hash> $(basename <filename>)

# register the storepath in the nix database, the storepath must exist
printf "<new_storepath>\n\n0\n" | nix-store --register-validity --reregister

# build a custom nixos vm with the desired configuration
export QEMU_OPTS="-nographic -serial mon:stdio" QEMU_KERNEL_PARAMS=console=ttyS0 QEMU_NET_OPTS="hostfwd=tcp::2222-:22"
nix-build '<nixpkgs/nixos>' -A vm -k -I nixos-config=./vm.nix

# rebuild a package with debug symbols
nix-build -E 'with import <nixpkgs> {}; enableDebugging <package>'

# check syntax
nix-instantiate --parse-only <nix_file>

# override package with channel
nix-build -E 'with (import <nixpkgs>{}); <package>.override {  }'

# override package on a local repo
nix-build -E 'with (import ./default.nix{}); <package>.override {  }'

# build specified derive file
nix-store --realise <derivation>

# get build dependencies of a derivation
nix-store --query --references $(nix-instantiate <nix_file>)

# garbage collect, deletes all unreachable store objects in the Nix store to clean up your system
nix-store --gc

# print all paths considered before performing a garbage collect
nix-store --gc --print-roots

# get garbage collect roots
nix-store --query --roots $(which <program>)

# list indirect garbage collect roots
ls -l /nix/var/nix/gcroots/auto/

# get resolved indirect gc roots
fd . --max-depth 1 /nix/var/nix/gcroots/auto/ | xargs readlink

# remove, delete, cleanup builds
fd . --max-depth 1 /nix/var/nix/gcroots/auto/ | xargs readlink | rg result | xargs rm -v; nix-collect-garbage --delete-old

# get build hash
nu -c "nix derivation show | from json | values | get outputs.out.path | first | path parse | get stem | parse --regex '([^-]*)-.*' | get capture0 | get 0"

# full upgrade
nix-channel --update && nix profile upgrade --all

# full upgrade (old)
nix-channel --update && nix-env -u --always

# full cleanup of old entries, generations, builds
fd . --max-depth 1 /nix/var/nix/gcroots/auto/ | xargs readlink | xargs rm; nix-collect-garbage --delete-old

# get hash for url
nix-prefetch-url --type sha256 --unpack <url>

# pin nixpkgs with niv sources
nix-shell -p niv --run "niv init --nixpkgs nixos/nixpkgs --nixpkgs-branch nixos-23.11"

$ nix_file: fd --type f --follow --exclude ".git" \.nix "." --- --preview 'bat --color=always --style=numbers --line-range=:500 {}'
$ package_installed: nix-env --query | sed 's,-.*,,'

% nixos

# list nixos generations
nix profile history --profile /nix/var/nix/profiles/system

# remove older nixos generations
nix profile wipe-history --profile /nix/var/nix/profiles/system --older-than 14d

# get list of system packages
nix-store -q --references /run/current-system/sw

# upgrade nixos and set as current boot
nixos-rebuild --upgrade boot

# generate minimal iso image configuration
nix-shell -I nixpkgs=channel:nixos-23.11 -p 'let pkgs = import <nixpkgs> { config = {}; overlays = []; }; iso-config = pkgs.path + /nixos/modules/installer/cd-dvd/installation-cd-minimal.nix; nixos = pkgs.nixos iso-config; in nixos.config.system.build.nixos-generate-config' --command 'nixos-generate-config --dir ./'

# build iso image
NIX_PATH=nixpkgs=https://github.com/NixOS/nixpkgs/tarball/nixos-23.11 nix-shell -p nixos-generators --run "nixos-generate --format iso --configuration ./<nix_file> -o result

# generate qcow image from nixos config
nix run github:nix-community/nixos-generators -- -c ./configuration.nix -f qcow

# create qemu vm with nixos configuration
nix-build '<nixpkgs/nixos>' -A vm -I nixpkgs=channel:nixos-23.11 -I nixos-config=./<nixos_config>
QEMU_KERNEL_PARAMS=CONSOLE=TTYS0 ./result/bin/run-nixos-vm -nographic; reset

# run a custom nixos vm with the desired configuration
export QEMU_OPTS="-nographic -serial mon:stdio" QEMU_KERNEL_PARAMS=console=ttyS0 QEMU_NET_OPTS="hostfwd=tcp::2222-:22"
nixos-rebuild -I nixpkgs=<path nixpkgs> -I nixos-config=./<vm_nix_file> build-vm
