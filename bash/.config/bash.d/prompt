#!/usr/bin/env bash
# some code from
#   liquidprompt


__color_string() {
  local ti_sgr0=$(tput sgr0)
  printf "\001%s\002%s\001%s\002" "$1" "$2" "$ti_sgr0"
}

__color_string_bold() {
  local ti_sgr0=$(tput sgr0)
  local ti_bold=$(tput bold)
  printf "\001%s%s\002%s\001%s\002" "$ti_bold" "$1" "$2" "$ti_sgr0"
}


__prompt_color_cmd_result() {
  local color=""
  if (($1 == 0)); then
    color=$__PROMPT_GREEN
  else
    color=$__PROMPT_RED
  fi
  __color_string $color $1
}


__prompt_color_by_user() {
  local color=""
  local color_function=__color_string
  local string=$1
  local -r loginname=$(logname 2>/dev/null || echo -n "$LOGNAME")
  if ((EUID == 0 )); then
    color_function=__color_string
    color=$__PROMPT_RED
  else
    if [[ "${USER}" != "$loginname" ]]; then
      color_function=__color_string_bold
      color=$__PROMPT_WHITE
    else
      color_function=__color_string
      color=$__PROMPT_WHITE
      string=
    fi
    if (( __PROMPT_ENABLE_SUDO )) \
      && hash sudo 2>/dev/null; then
      if sudo -n true 2>/dev/null; then
        color_function=__color_string_bold
        color=$__PROMPT_RED
      fi
    fi
  fi
  $color_function "$color" "$string"
}


__prompt_color_bracket_wrap() {
  if [[ "$TERM" == screen* ]]; then
    local -r opening_bracket=$(__color_string_bold $__PROMPT_BLUE "[")
    local -r closing_bracket=$(__color_string_bold $__PROMPT_BLUE "]")
    printf "%s%s%s" "$opening_bracket" "$*" "$closing_bracket"
  else
    printf "[%s]" "$*"
  fi
}


__prompt_connection_type() {
    if [[ -n "${SSH_CLIENT-}${SSH2_CLIENT-}${SSH_TTY-}" ]]; then
        echo ssh
    else
        # tmux: see GH #304
        # TODO check on *BSD
        local whoami="$(LC_ALL=C who am i)"
        local sess_parent="$(ps -o comm= -p $PPID 2> /dev/null)"
        if [[ x"$whoami" != *'('* || x"$whoami" = *'(:'* || x"$whoami" = *'(tmux'* ]]; then
            echo lcl  # Local
        elif [[ "$sess_parent" = "su" || "$sess_parent" = "sudo" ]]; then
            echo su   # Remote su/sudo
        else
            echo tel  # Telnet
        fi
    fi
}


__prompt_color_x11() {
  local string="$1"

  if [[ -n "$DISPLAY" ]]; then
    color=$__PROMPT_GREEN
  else
    color=$__PROMPT_YELLOW
  fi
  __color_string "$color" "$string"
}


__prompt_color_host() {
  local color=
  local color_function=__color_string
  local x11=$(__prompt_color_x11 "@")
  local string="${x11}${1}"
  case "$(__prompt_connection_type)" in
  lcl)
      string=
      ;;
  ssh)
      # If we want a different color for each host
      color=$__PROMPT_YELLOW
      ;;
  su)
      color=$__PROMPT_YELLOW
      color_function=__color_string_bold
      ;;
  tel)
      color=$__PROMPT_RED
      ;;
  *)
      ;;
  esac
  $color_function "$color" "$string"
}


__prompt_jobcount() {
    (( __PROMPT_ENABLE_JOBS )) || return

    local ret=""
    local -i r s

    # Count detached sessions
    if (( __PROMPT_ENABLE_DETACHED_SESSION )); then
      local -i detached=0
      if (( __PROMPT_ENABLE_SCREEN )); then
        detached=$(screen -ls 2> /dev/null | \grep -c '[Dd]etach[^)]*)$')
      fi

      if (( __PROMPT_ENABLE_TMUX )); then
        detached+=$(tmux list-sessions 2> /dev/null | \grep -cv 'attached')
      fi

      if (( detached > 0 )); then
        ret+=$(__color_string "$__PROMPT_YELLOW" "${detached}d")
      fi

    fi

    # Count running jobs
    if (( r = $(jobs -r | wc -l) )); then
      [[ -n "$ret" ]] && ret+='/'
      ret+=$(__color_string_bold "$__PROMPT_YELLOW" "${r}&")
    fi

    # Count stopped jobs
    if (( s = $(jobs -s | wc -l) )); then
      [[ -n "$ret" ]] && ret+='/'
      ret+=$(__color_string_bold "$__PROMPT_YELLOW" "${s}z")
    fi

    [[ -n "$ret" ]] && echo -nE "$ret "
}


__prompt_color_permission() {
  (( __PROMPT_ENABLE_PERMISSION )) || return
  local color=
  local string=$1

  if [[ -w "${PWD}" ]]; then
    color=$__PROMPT_GREEN
  else
    color=$__PROMPT_RED
  fi
  __color_string "$color" "$string"
}


__prompt_escape() {
  echo -nE "${1//\\/\\\\}"
}


__prompt_git_branch() {
  (( __PROMPT_ENABLE_GIT )) || return

  \git rev-parse --is-inside-work-tree >/dev/null 2>&1 || return

  local branch
  if branch="$(\git symbolic-ref -q HEAD)"; then
    __prompt_escape "${branch#refs/heads/}"
  else
    # In detached head state, use commit instead
    # No escape needed
    \git rev-parse --short -q HEAD
  fi
}


# Display additional information if HEAD is in merging, rebasing
# or cherry-picking state
__prompt_git_head_status() {
  local gitdir
  gitdir="$(\git rev-parse --git-dir 2>/dev/null)"
  if [[ -f "${gitdir}/MERGE_HEAD" ]]; then
    echo " MERGING"
  elif [[ -d "${gitdir}/rebase-apply" || -d "${gitdir}/rebase-merge" ]]; then
    echo " REBASING"
  elif [[ -f "${gitdir}/CHERRY_PICK_HEAD" ]]; then
    echo " CHERRY-PICKING"
  fi
}


# Set a color depending on the branch state:
# - green if the repository is up to date
# - yellow if there is some commits not pushed
# - red if there is changes to commit
#
# Add the number of pending commits and the impacted lines.
__prompt_git_branch_color()
{
  (( __PROMPT_ENABLE_GIT )) || return

  local branch
  branch="$(__prompt_git_branch)"
  if [[ -z "$branch" ]]; then
    return
  fi

  local end
  end=$(__color_string "$__PROMPT_RED" "$(__prompt_git_head_status)")

  if LC_ALL=C \git status --porcelain 2>/dev/null | \grep -q '^??'; then
    end=$(__color_string "$__PROMPT_RED" "${__PROMPT_MARK_UNTRACKED}${end}")
  fi

  # Show if there is a git stash
  if \git rev-parse --verify -q refs/stash >/dev/null; then
    end=$(__color_string "$__PROMPT_YELLOW" "${__PROMPT_MARK_STASH}${end}")
  fi

  local remote
  remote="$(\git config --get branch.${branch}.remote 2>/dev/null)"

  local has_commit=""
  local commit_ahead
  local commit_behind
  if [[ -n "$remote" ]]; then
    local remote_branch
    remote_branch="$(\git config --get branch.${branch}.merge)"
    if [[ -n "$remote_branch" ]]; then
      remote_branch=${remote_branch/refs\/heads/refs\/remotes\/$remote}
      commit_ahead="$(\git rev-list --count $remote_branch..HEAD 2>/dev/null)"
      commit_behind="$(\git rev-list --count HEAD..$remote_branch 2>/dev/null)"
      if [[ "$commit_ahead" -ne "0" && "$commit_behind" -ne "0" ]]; then
        has_commit="$(__color_string "$__PROMPT_YELLOW" "+${commit_ahead}")/"
        has_commit+=$(__color_string_bold "$__PROMPT_RED" "-${commit_behind}")
      elif [[ "$commit_ahead" -ne "0" ]]; then
        has_commit=$(__color_string "$__PROMPT_YELLOW" "${commit_ahead}")
      elif [[ "$commit_behind" -ne "0" ]]; then
        has_commit=$(__color_string_bold "$__PROMPT_RED" "-${commit_behind}")
      fi
    fi
  fi

  local ret
  local shortstat # only to check for uncommitted changes
  shortstat="$(LC_ALL=C \git diff --shortstat HEAD 2>/dev/null)"

  if [[ -n "$shortstat" ]]; then
    local u_stat # shorstat of *unstaged* changes
    u_stat="$(LC_ALL=C \git diff --shortstat 2>/dev/null)"
    u_stat=${u_stat/*changed, /} # removing "n file(s) changed"

    local i_lines # inserted lines
    if [[ "$u_stat" = *insertion* ]]; then
        i_lines=${u_stat/ inser*}
    else
        i_lines=0
    fi

    local d_lines # deleted lines
    if [[ "$u_stat" = *deletion* ]]; then
        d_lines=${u_stat/*\(+\), }
        d_lines=${d_lines/ del*/}
    else
        d_lines=0
    fi

    local has_lines
    has_lines="+$i_lines/-$d_lines"

    if [[ -n "$has_commit" ]]; then
        # Changes to commit and commits to push
        ret=$(__color_string "$__PROMPT_RED" "$branch")
        ret+="("
        ret+=$(__color_string "$__PROMPT_MAGENTA" "$has_lines")
        ret+=",$has_commit)"
    else
        ret="${LP_COLOR_CHANGES}${branch}${NO_COL}(${LP_COLOR_DIFF}$has_lines${NO_COL})" # changes to commit
        ret=$(__color_string "$__PROMPT_RED" "$branch")
        ret+="("
        ret+=$(__color_string "$__PROMPT_MAGENTA" "$has_lines")
        ret+=")"
    fi
  elif [[ -n "$has_commit" ]]; then
    # some commit(s) to push
    if [[ "$commit_behind" -gt "0" ]]; then
        ret=$(__color_string_bold "$__PROMPT_RED" "${branch}")
        ret+="($has_commit)"
    else
        ret=$(__color_string "$__PROMPT_YELLOW" "${branch}")
        ret+="($has_commit)"
    fi
  else
    ret=$(__color_string "$__PROMPT_GREEN" "${branch}")
  fi
  echo -nE " $ret$end"
}


__prompt_battery()
{
  (( __PROMPT_ENABLE_BATTERY )) || return 4
  local acpi
  acpi="$(acpi --battery 2>/dev/null)"
  # Extract the battery load value in percent
  # First, remove the beginning of the line...
  local bat="${acpi#Battery *, }"
  bat="${bat%%%*}" # remove everything starting at '%'

  if [[ -z "${bat}" ]]; then
    # no battery level found
    return 4
  fi
  echo -nE "$bat"
  # discharging
  if [[ "$acpi" == *"Discharging"* ]]; then
    # under => 0, above => 1
    return $(( bat > LP_BATTERY_THRESHOLD ))
  # charging
  else
    # under => 2, above => 3
    return $(( 1 + ( bat > LP_BATTERY_THRESHOLD ) ))
  fi
}


__prompt_battery_color()
{
  (( __PROMPT_ENABLE_BATTERY )) || return

  local mark=$__PROMPT_MARK_BATTERY
  local chargingmark=$__PROMPT_MARK_ADAPTER
  local -i bat ret
  local string=
  local color=
  local color_function=__color_string
  bat="$(__prompt_battery)"
  ret=$?

  if (( ret == 4 || bat == 100 )); then
    # no battery support or battery full: nothing displayed
    :
  elif (( ret == 3 && bat != 100 )); then
    # charging and above threshold and not 100%
    # green ⏚
    color=$__PROMPT_GREEN
    string=$chargingmark
  elif (( ret == 2 )); then
    # charging but under threshold
    # yellow ⏚
    color=$__PROMPT_YELLOW
    string=$chargingmark
  elif (( ret == 1 )); then
    # discharging but above threshold
    # yellow ⌁
    color=$__PROMPT_YELLOW
    string=$mark
  # discharging and under threshold
  else
    color=$__PROMPT_RED
    string=$mark
  fi
  if [[ -n "$string" ]]; then
    string=" $string "
  fi
  $color_function "$color" "$string"
}

__prompt_color_venv() {
  local color=$__PROMPT_CYAN
  local string=
  if [[ "$__PROMPT_ENABLE_VIRTUALENV,${VIRTUAL_ENV-}${CONDA_DEFAULT_ENV-}" = 1,?* ]]; then
    if [[ -n "${VIRTUAL_ENV-}" ]]; then
      string="${VIRTUAL_ENV##*/}"
    else
      string="${CONDA_DEFAULT_ENV##*/}"
    fi
    string=$(__color_string "$color" "$string")
    echo -nE "[$string]"
  else
    :
  fi
}


__prompt_set_custom_bash_prompt() {
  local -r RESULT=$?
  local -r DATE="\D{%T dow%ww%U}"
  local -r __PROMPT_USER='\u'
  local -r __PROMPT_HOST='\h'
  local -r __PROMPT_FQDN='\H'
  local -r __PROMPT_MARK='\$'
  local -r __PROMPT_DIR='\w'
  PROMPT_DIRTRIM=3


  local __PROMPT_PS1=""
  local -r __PROMPT_BLACK=$(tput setaf 0)
  local -r __PROMPT_RED=$(tput setaf 1)
  local -r __PROMPT_GREEN=$(tput setaf 2)
  local -r __PROMPT_YELLOW=$(tput setaf 3)
  local -r __PROMPT_BLUE=$(tput setaf 4)
  local -r __PROMPT_MAGENTA=$(tput setaf 5)
  local -r __PROMPT_CYAN=$(tput setaf 6)
  local -r __PROMPT_WHITE=$(tput setaf 7)

  local -r __PROMPT_MARK_GIT="±"
  local -r __PROMPT_MARK_UNTRACKED="*"
  local -r __PROMPT_MARK_STASH="+"
  local -r __PROMPT_MARK_PROXY="↥"
  local -r __PROMPT_MARK_BATTERY="⌁"
  local -r __PROMPT_MARK_ADAPTER="⏚"
  local -r __PROMPT_MARK_PERMISSION=":"

  local -ir __PROMPT_ENABLE_GIT=${__PROMPT_ENABLE_GIT:-1}
  local -ir __PROMPT_ENABLE_SHORTEN_PATH=${__PROMPT_ENABLE_SHORTEN_PATH:-1}
  local -ir __PROMPT_ENABLE_PERMISSION=${__PROMPT_ENABLE_PERMISSION:-1}
  local -ir __PROMPT_ENABLE_BATTERY=${__PROMPT_ENABLE_BATTERY:-1}
  local -ir __PROMPT_ENABLE_SVN=${__PROMPT_ENABLE_SVN:-1}
  local -ir __PROMPT_ENABLE_VIRTUALENV=${__PROMPT_ENABLE_VIRTUALENV:-1}
  local -ir __PROMPT_ENABLE_SSH_COLORS=${__PROMPT_ENABLE_SSH_COLORS:-1}
  local -ir __PROMPT_ENABLE_FQDN=${__PROMPT_ENABLE_FQDN:-1}
  local -ir __PROMPT_ENABLE_SUDO=${__PROMPT_ENABLE_SUDO:-1}
  local -ir __PROMPT_ENABLE_TMUX=${__PROMPT_ENABLE_TMUX:-1}
  local -ir __PROMPT_ENABLE_SCREEN=${__PROMPT_ENABLE_SCREEN:-0}
  local -ir __PROMPT_ENABLE_DETACHED_SESSION=${__PROMPT_ENABLE_DETACHED_SESSION:-1}
  local -ir __PROMPT_ENABLE_JOBS=${__PROMPT_ENABLE_JOBS:-1}
  #local -ir __PROMPT_ENABLE_=${__PROMPT_ENABLE_:-1}

  __PROMPT_PS1_USER=$(__prompt_color_by_user "$__PROMPT_USER")
  __PROMPT_PS1_MARK="$__PROMPT_MARK"
  __PROMPT_PS1_HOST=$(__prompt_color_host "$__PROMPT_HOST")
  __PROMPT_PS1_DIR=$(__color_string "$__PROMPT_WHITE" "$__PROMPT_DIR")
  __PROMPT_PS1_JOBS=$(__prompt_jobcount)
  __PROMPT_PS1_DATE=$(__color_string "$__PROMPT_WHITE" "$DATE")
  __PROMPT_PS1_PERMISSION=$(__prompt_color_permission "$__PROMPT_MARK_PERMISSION")
  __PROMPT_PS1_GIT=$(__prompt_git_branch_color)
  __PROMPT_PS1_BATTERY=$(__prompt_battery_color)
  __PROMPT_PS1_VIRTUALENV=$(__prompt_color_venv)


  __PROMPT_PS1="$__PROMPT_PS1_DATE "
  __PROMPT_PS1+="$__PROMPT_PS1_JOBS"
  __PROMPT_PS1+="$__PROMPT_PS1_BATTERY"
  __PROMPT_PS1+=$(__prompt_color_bracket_wrap "${__PROMPT_PS1_USER}${__PROMPT_PS1_HOST}${__PROMPT_PS1_PERMISSION}${__PROMPT_PS1_DIR}")
  __PROMPT_PS1+="$__PROMPT_PS1_VIRTUALENV"
  __PROMPT_PS1+="$__PROMPT_PS1_GIT"
  __PROMPT_PS1+="\n"
  __PROMPT_PS1+="$(__prompt_color_cmd_result $RESULT) "
  __PROMPT_PS1+="$__PROMPT_PS1_MARK "
  PS1=$__PROMPT_PS1
}

__prompt_require_tool()
{
    (( __PROMPT_ENABLE_$1 )) && { command -v $2 >/dev/null || eval __PROMPT_ENABLE_$1=0 ; }
}

__prompt_require_tool GIT git
__prompt_require_tool SVN svn
__prompt_require_tool BATTERY acpi

PROMPT_COMMAND="__prompt_set_custom_bash_prompt"
PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a"
#PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"
